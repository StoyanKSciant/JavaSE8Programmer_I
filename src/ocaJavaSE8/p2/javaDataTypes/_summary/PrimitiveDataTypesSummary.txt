NB! * The variable is initialized to its default value if its never actually
initialized by the code

Default values:

char - \n0000
byte, short, int - 0
long - 0L
float - 0.0f
double - 0.0d
boolean - false
object - null

NB! * The local variables (variables that are declared within a method) aren’t
initialized with their default values. If you try to print the value of a local
variable before initializing it, the code won’t compile.

NB! * Conversion from {byte, char or short} to {int, long or float} does not
need a cast Because int, long or float are bigger that byte char or short.

* Java defines eight primitive data types: char, byte, short, int, long, float,
double and boolean.

* Primitive data types are the simplest data types.

* Primitive data types are predefined by the programming language. A user can’t
define a primitive data type in Java.

* It’s helpful to categorize the primitive data types as Boolean, numeric, and
character data types.

* Integral types means byte, short, int, long, and char

							The boolean data type:

* The boolean data type is used to store data with only two possible values.
These two possible values may be thought of as yes/no, 0/1, true/false, or any
other combination. The actual values that a boolean can store are true and false.

* true and false are literal values.

* A literal is a fixed value that doesn’t need further calculations to be
assigned to any variable.

							Numeric data types

* Numeric values can be stored as either integers or decimal numbers.

* byte, short, int, and long can be used to store integers.

* The byte, short, int, and long data types use 8, 16, 32, and 64 bits,
respectively, to store their values.

* float and double can be used to store decimal numbers.

* The float and double data types use 32 and 64 bits, respectively, to store
their values.

* The default type of integers (non-decimal) numbers is int.

NB! * Conversion of int to float does not need a cast because a float can hold
any value of int. Note that opposite is not true because of loss of precision.

* To designate an integer literal value as a long value, add the suffix L or l
to the literal value.

* Numeric values can be stored in binary, octal, decimal, and hexadecimal number
formats. This exam won’t ask you to convert a number from one number
system to another.

	* Literal values in the decimal number system use digits from 0 to 9 (a
	total of 10 digits).

	* Literal values in the octal number system use digits from 0 to 7 (a total
	of 8 digits).

	* Literal values in the hexadecimal number system use digits from 0 to 9 and
	letters from A to F (a total of 16 digits and letters).

	* Literal values in the binary number system use digits 0 and 1 (a total of
	2 digits).

	* The literal values in the octal number system start with the prefix 0. For
	example, 0413 in the octal number system is 267 in the decimal number system.

	* The literal values in the hexadecimal number system start with the prefix
	0x.
	For example, 0x10B in the hexadecimal number system is 267 in the decimal
	number system.

	* The literal values in the binary number system start with the prefix 0b or
	0B.
	For example, the decimal value 267 is 0B100001011 in the binary system.

* Starting with Java 7, you can use underscores within the Java literal values
to make them more readable:
		0B1_0000_10_11, 0_413, and 0x10_B
		are valid binary, octal, and hexadecimal literal values.

* The default type of a decimal number is double.

* To designate a decimal literal value as a float value, add the suffix F or f
to the literal value.

* The suffixes D and d can be used to mark a literal value as a double value.
Though it’s allowed, doing so is not required because the default value of
decimal literals is double.

						Character primitive data types:

* A char data type can store a single 16-bit Unicode character; that is, it can
store characters from virtually all the world’s existing scripts and languages.

* You can use values from \u0000 (or 0) to a maximum of \uffff (or 65,535
inclusive) to store a char. Unicode values are defined in the hexadecimal number
system.

NB! * Internally, the char data type is stored as an unsigned integer value (only
positive integers).
 	When you assign a letter to a char, Java stores its integer equivalent value
    You may assign a positive integer value to a char instead of a letter, such
    as 122.

NB! * A char value can ALWAYS be assigned to an int variable, since the int type
is wider than the char type.

* The literal value 122 is not the same as the Unicode value \u0122. The former
is a decimal number and the latter is a hexadecimal number.

* Single quotes, not double quotes, are used to assign a letter to a char
variable.
