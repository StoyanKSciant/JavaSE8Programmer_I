
Operators && (AND)

true && true ->  true
true && false ->  false
false && true ->  false
false && false ->  false
true && true && false -> false
________________________________________________________________________________

Operator || (OR)

true || true ->  true
true || false ->  true
false || true ->  true
false || false ->  false
false || false || true -> true
________________________________________________________________________________

Operator ! (NOT)*

!true ->  false
!false ->  true

* can't be directly applied to variable, only to evaluation condition.
________________________________________________________________________________



							Assignment operators:

* Assignment operators can be used to assign or reassign values to all types of
variables.

* A variable can't be assigned to an incompatible value. For example, character
and numeric values can't be assigned to a boolean variable and vice versa.

* += and -= are short forms of addition/subtraction and assignment.

* += can be read as "first add and then assign" and -= can be read as "first
subtract and then assign."



							Arithmetic operators:

* Arithmetic operators can't be used with the boolean data type. Attempting to
do so will make the code fail to compile.

NB! * evaluation of ("1" + 2 + 3) is as follows: ("1" + 2) + 3 -> "12" + 3 ->
"123", because concatenation is more powerful than addition.

NB! * (a == a++) evaluates to true!

NB! * All compound assignment (*=, /=, +=, -=) operators internally do an
explicit cast. so (var type) ..= (other var type) -> always cast to var type

* ++ and –- are unary increment and decrement operators. These operators work
with single operands.

* Unary operators can be used in prefix or postfix notation.

* When the unary operators ++ and -- are used in prefix notation, the value of
the variable increments/decrements just before the variable is used in an
expression.

* By default, unary operators have a higher precedence than multiplication
operators and addition operators.


							Relational operators:

* Relational operators are used to compare values for equality (==) and
inequality (!=). They're also used to determine whether two numeric values are
greater than (>, >=) or less than (<, <=) each other.

* You can't compare incomparable values. For example, you can't compare a
boolean with an int, a char, or a floating-point number. If you try to do so,
your code will not compile.

* The operators equal to (==) and not equal to (!=) can be used to compare all
types of primitives: char, byte, short, int, long, float, double, and boolean.

* The operator == returns true if the primitive values being compared are equal.

* The operator != returns true if the primitive values being compared are not
equal.

* The result of the relational operator is always a boolean value.



							Logical operators:

* You can use the logical operators to determine whether a set of conditions is
true or false and proceed accordingly.

* Logical negation (!) negates the boolean value. It evaluates to true for false
and vice versa.

* The result of a logical operation is always a boolean value.

NB! * || and && are called short circuiting operators because if, while
evaluating a logical expression, at any stage, the value of the whole expression
can be determined without evaluating the rest of the expression, then the
remaining sub-expressions are not evaluated.

* Logical AND (&&) evaluates to true if all operands are true and false
otherwise.

* Logical OR (||) evaluates to true if any or all the operands are true.
