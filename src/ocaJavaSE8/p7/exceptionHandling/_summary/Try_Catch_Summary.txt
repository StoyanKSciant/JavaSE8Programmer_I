There are a few scenarios in Java in which a finally block does not execute:
1. Application termination—The try or the catch block executes System.exit,
	which terminates the application
2. Fatal errors—A crash of the JVM or the OS

NB! * A try without resources must have either a catch or a finally. It may
have both as well.
Following constructs are valid:
1. try{ } catch(Exception e){  }          // no finally
2. try{ } finally{  }          // no catch
3. try{ } catch(Exception e){  } finally{  }

* Watch out for code that returns a value from the catch block and
modifies it in the finally block. If a catch block returns a primitive data
type, the finally block can’t modify the value being returned by it. If a catch
block returns an object, the finally block can modify the value being
returned by it.

* Java doesn’t compile code if it contains unreachable statements.

* A try block may be followed by multiple catch blocks, and the catch blocks
may be followed by a single finally block.

* A try block may be followed by either a catch or a finally block or both. But
a finally block alone wouldn’t suffice if code in the try block throws a
checked exception. In this case, you need to catch the checked exception or
declare it to be thrown by your method. Otherwise your code won’t compile.

* The try, catch, and finally blocks can’t exist independently.

* The finally block can’t appear before a catch block.

* A finally block always executes, regardless of whether the code throws
an exception.
