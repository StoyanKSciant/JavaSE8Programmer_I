* A class can inherit the properties and behavior of another class.

NB! * A reference variable of the base class can't access the variables and
methods defined in its subclass without an explicit cast.

* An interface can inherit zero or more interfaces. An interface cannot inherit
a class.

NB! * In Java 8, interfaces DON'T allow multiple implementation inheritance 
through default methods. You cannot have a class that implements two interfaces 
where both the interfaces contain a default method with the same signature 
unless the class provides an implementation for that method itself.

NB! * A class that is marked final cannot be extended by another class.

NB! * A final method defined in a base class can’t be overridden by a derived
class.

NB! * Observe that the rule for overriding a method is opposite to the rule for
constructors. An overriding method cannot throw a superclass exception, while a
constructor of a subclass cannot throw subclass exception

NB! * non-static variables are SHADOWED and methods are OVERRIDDEN.
 1. Which variable will be used depends on the class that the variable is
declared of.
 2. Which method will be used depends on the actual class of the object that is
referenced by the variable.

NB! *  			MyDerivedClass instance = new MyDerivedClass();
When you access an object of the class MyDerivedClass using its own type, you
can access all the variables and methods that are defined in its base class and
interface—the class.

NB! *
When you access an object of the class MyDerivedClass using its base class type,
you can only access the variables and methods defined in the base class
MyBaseClass and on other from the class referred to (MyDerivedClass) or other
implemented interfaces.

NB! *			MyInterface instance = new MyDerivedClass();
When you access an object of the class MyDerivedClass using interface,
you can only access the variables and methods defined in the interface
MyInterface and on other from the class referred to (MyDerivedClass) or the
inherited base class.

NB! *			MyDerivedClass instance = new MyBaseClass();	// without cast
			dog IS type of animal but animal isn't type of dog
You can’t refer to an object of a base class by using a reference variable of
its derived class. Because all members of a derived class can’t be accessed
using an object of the base class, it isn’t allowed.

________________________________________________________________________________
NB! * Access to static fields/methods and instance fields depends on the CLASS
OF REFERENCE VARIABLE and not the actual object to which the variable points to.

	class instanceName REFERENCE TYPE = new class() OBJECT TYPE

	class ABCD{
	   int x = 10;
	   static int y = 20;
	}
	class MNOP extends ABCD{
	   int x = 30;
	   static int y = 40;
	}

	public class TestClass {
	   public static void main(String[] args) {
	     System.out.println(
	     new MNOP().x+", "+new MNOP().y); // the reference  is of type MNOP so
	     // MNOP.x will be accessed

	     ABCD a = new MNOP();    
		 System.out.println(a.x); // ABCD's x and y would have been accessed  
		 System.out.println(a.y); // because a is of type ABCD even though
		 						  // the actual object is of type MNOP.
	   }
	}

This is opposite of what happens in the case of instance methods. 
In case of instance methods the method of the ACTUAL CLASS OF THE OBJECT is
called.

________________________________________________________________________________
* Inheriting a class is also known as subclassing.

NB! * The first concrete class in the hierarchy must supply actual method
implementations for all abstract methods.

* A class that inherits another class is called a derived class or subclass.

* A class that is inherited is called a parent or base class.

NB! * A base class can use reference variables and object of its derived classes
(with exception of constructors).

NB! * Private members of a base class cannot be inherited in the derived class.

* A derived class can only inherit members with the default access modifier if
both the base class and the derived class are in the same package.

* A class uses the keyword extends to inherit a class.

* An abstract class can inherit a concrete class, and a concrete class can
inherit an abstract class.

* Though Java does not allow a class to inherit from more than one class, it
allows a class to implement multiple interfaces. A class uses the keyword
implements to implement an interface.

* If the signature of a method is changed in an interface, all classes that
implement the interface will fail to compile.

* If a derived class doesn’t implement all the abstract methods defined by its
base class, then it also needs to be an abstract class.

* You should initialize all variables in an interface, or your code won’t
compile:		interface MyInterface {
					int AGE;		// won't compile
				}

* The access modifiers play an important role in determining the inheritance of
base class members in derived classes. A derived class inherits all the
non-private members of its base class.

* Because a derived class may inherit different implementations for the same
method signature from multiple base classes, multiple inheritance is not allowed
in Java.

* Default—Members with default access can be accessed in a derived class only if
base and derived classes reside in the same package.

* protected—Members with protected access are accessible to all the derived
classes, regardless of the packages in which the base and derived classes are
defined.

* public—Members with public access are visible to all the other classes.

* private base class members can't be inherited.

* Base class members with default access can't be inherited, if the base class
and derived classes exist in separate packages.

* Constructors of the base class can't be inherited. A derived class can call a
base class’s constructors, but it doesn’t inherit them.

* Calling super(); means you are trying to call the super class's constructor.
But you can't call the super class's constructor from a method super();
can only be the first statement of a constructor.

* for invoking base class methods use super without brackets super.method();
 There is no way to go more than one level up for methods
 super.super.method() is not allowed.

* An abstract class can extend a concrete class and vice versa.

* An abstract class can implement interfaces.

* An abstract class can extend another abstract class.


