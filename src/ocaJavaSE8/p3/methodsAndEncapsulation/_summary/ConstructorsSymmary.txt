
* Constructors are special methods defined in a class that create and return an
object of the class in which they're defined. They are named after the class,
and the don't specify a return type.

* ORDER OF INSTANTIATING AN INSTANCE:

	1. First static blocks and methods are called IN THE ORDER they are defined.
	2. Instance fields are instantiated.
	3. Constructors are evoked.


* super() method calls the constructor of superclass from the instantiation of
the child-class. super() CAN only be called at the beginning of the child-class
constructor.

* If you define a return type for a constructor, it'll no longer be treated like
a constructor. It'll be treated like a regular method, even though it shares the
same name as its class.

	class Employee {
		void Employee() {
			System.out.println("Constructor");
		}
	}
	class Office {
		public static void main(String args[]) {
			Employee emp = new Employee();	// Doesn't call method Employee with
											// return type void
		}
	}

NB! * While trying to compile child class with no set constructors, the Java
compiler generates a default constructor for it, which looks like the following:
	ChildClass() {
		super();
	}

	Accessibility of a default constructor matches the accessibility of its class.
	Java creates a public default constructor for a public class. It creates a
	default constructor with package access for a class with package-level access.

NB! * A Constructor can be declared public, protected, default or private.

NB! * Java accepts changes in the objects of base-derived classes as the sole
criterion to define overloaded constructors and methods.

ex:	class Shoe {}
		class Boot extends Shoe {}
		class ShoeFactory {				    // *both constructors are valid
			ShoeFactory(Boot val) {			// *
				System.out.println("boot");
			}
			ShoeFactory(Shoe val) {			// *
				System.out.println("shoe");
			}
		}


NB! * If a class defines multiple initializer blocks, their order of execution
depends on their placement in a class. But all of them execute before a class's
constructor.
