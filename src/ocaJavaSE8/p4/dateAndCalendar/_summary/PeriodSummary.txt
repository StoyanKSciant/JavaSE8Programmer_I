
* The Period class represents a date-based amount in years, months, and days,
like 2 years, 5 months, and 10 days. To work with time-based amounts in seconds
and nanoseconds, you can use the Duration class.

* Period is an immutable class.

* You can add or subtract Period instances from LocalDate and LocalDateTime
classes.

* The Period class defines multiple factory methods to create its instances. The
static methods of(), ofYears(), ofMonths(), ofWeeks(), and ofDays() accept
int values to create periods of years, months, weeks, or days.

NB! * A Period of 35 days is not stored as 1 month and 5 days. Its individual
elements, that is, days, months, and years, are stored the way it is initialized.

* You can define positive or negative periods of time. You can define Period
instances representing 15 or -15 days.

* You can also parse a string to instantiate Period by using its static method
parse. This method parses string values of the format PnYnMnD or PnW, where
n represents a number and the letters (P, Y, M, D, and W) represent parse, year,
month, day, and week. These letters can exist in lower- or upper case. Each
string must start with the letter p or P and must include at least one of the four
sections, that is, year, month, week, or day.

* If you pass invalid string values to parse(), the code will compile but will throw
a runtime exception.

* You can also use the static method between(LocalDate dateInclusive, Local-
Date dateExclusive) to instantiate Period.

* The static method between accepts two LocalDate instances and returns a
Period instance representing number of years, days, and months between the
two dates. The first date is included, but the second date is excluded in the
returned Period.

* The Period class implements the interface TemporalAmount, so it can be used
with the methods plus() and minus() defined in the classes LocalDateTime
and LocalDate.
Because Period instances can represent positive or negative periods (like 15
days or -15 days), you can subtract days from a LocalDate or LocalDateTime by
calling the method plus.

* Similarly, you can use the method minus() with classes LocalDate and Local-
DateTime to subtract a period of years, months, weeks, or days.

* You can use the instance methods
	getYears(),
	getMonths(),
	getDays() to
query a Period instance on its years, months, and days. All these methods
return an int value.

* When you initialize a Period instance with days more than 31 or months more
than 12, it doesn’t recalculate its years, months, or days components.

* You can query whether any of three units of a Period is negative using the
methods isNegative and isZero. A Period instance is negative if all three of its
units are zero.

* You can use instance methods minus(TemporalAmount), minusDays(long),
minusMonths(long), minusYears(long), and multipliedBy(int) to create and
return a copy of Period instances with the specified period subtracted or modified.

* In the class Period, both the getXXX() methods and minusXXX() methods use
the plural form: getYears(), minusHours().

NB! * When you subtract a Period instance using the minusXXX() methods, its individual
elements are subtracted. Subtracting P10D from P1M returns P1M-10D
and not P20D.

* The method multipliedBy(int) in the class Period is used to modify all elements
of a Period instance. Period doesn’t define divideBy.

NB! * Adding a Period of 10 months to a Period of 5 months gives 15 months, not 1
year and 3 months.

* The method toTotalMonths() returns the total number of months in the period
by multiplying the number of years by 12 and adding the number of months.