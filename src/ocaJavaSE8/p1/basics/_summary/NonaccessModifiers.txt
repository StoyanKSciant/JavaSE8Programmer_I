
abstract | static | final | synchronized | native | strictfp | transient | volatile

* The abstract keyword, when prefixed to the definition of a concrete class, can
change it to an abstract class, even if it doesn't define any abstract methods.

* An abstract class can't be instantiated.

NB! * An interface is implicitly abstract. The Java compiler automatically adds
the keyword abstract to the definition of an interface (writing "abstract"to the
definition of an interface is redundant).

NB! * An abstract method doesn't have a body. When a non-abstract class extends
a class with an abstract method, it must implement the method.

* A variable can't be defined as an abstract variable.

* The static modifier can be applied to inner classes, inner interfaces,
variables, and methods. Inner classes and interfaces aren't covered in this exam.

* A method can't be defined as both abstract and static.

* static attributes (fields and methods) are common to all instances of a class
and aren't unique to any instance of a class.

* static attributes exist independently of any instances of a class and may be
accessed even when no instances of the class have been created.

* static attributes are also known as class fields or class methods because
they're said to belong to their class, not to any instance of that class.

* A static variable or method can be accessed using the name of a reference
object variable or the name of a class.

* A static method or variable can't access non-static variables or methods of a
class. But the reverse is true: non-static variables and methods can access
static variables and methods.

* static classes and interfaces are a type of nested classes and interfaces, but
they aren't covered in this exam.

* You can't prefix the definition of a top-level class or an interface with the
keyword static. A top-level class or interface is one that isn't defined within
another class or interface.

* synchronized method can't be accessed by multiple
threads concurrently. This constraint is used to protect the integrity
of data that might be accessed and changed by multiple threads
concurrently. You can't mark classes, interfaces, or variables with
this modifier.

* native method calls and makes use of libraries and methods
implemented in other programming languages such as C or C++. You can't
mark classes, interfaces, or variables with this modifier.

* transient variable isn't serialized when the corresponding
object is serialized. The transient modifier can't be applied to classes,
interfaces, or methods.

* volatile variable's value can be safely modified by different
threads. Classes, interfaces, and methods cannot use this modifier.

* strictfp: Classes, interfaces, and methods defined using this keyword
ensure that calculations using floating-point numbers are identical on
all platforms. This modifier can't be used with variables.
