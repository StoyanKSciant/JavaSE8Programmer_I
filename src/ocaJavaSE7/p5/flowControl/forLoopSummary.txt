* A for loop is usually used to execute a set of statements a fixed number of
times.

*  A for loop defines three types of statements separated by semicolons: initialization
statements, termination condition, and update clause.

*  The definition of any of the three for statements—initialization statements, termination
condition, and update clause—is optional. For example, for (;;);
and for (;;){} are valid code for defining a for loop. Also, defining any one of
these statements is also valid code.

*  An initialization block executes only once. A for loop can declare and initialize
multiple variables in its initialization block, but the variables that it declares
should be of the same type.

*  The termination condition is evaluated once, for all the iterations, before the
statements defined within the body of the loop are executed.

*  The for loop terminates when the termination condition evaluates to false.

*  The update block is usually used to increment or decrement the value of the
variables that are defined in the initialization block. It can also execute multiple
other statements, including method calls.

*  Nested for loops have no limits on levels.

*  Nested for loops are frequently used to work with multidimensional arrays.



							Enhanced for loops:

*  The enhanced for loop offers some benefits over the regular for loop, but it’s
not as flexible as the regular for loop.

*  The enhanced for loop offers simple syntax to iterate through a collection of
values—an array, ArrayList, or other classes from Java’s Collection framework
that store a collection of values.

*  The enhanced for loop can’t be used to initialize an array and modify
its elements.

*  The enhanced for loop can’t be used to delete the elements of a collection.

*  The enhanced for loop can’t be used to iterate over multiple collections or
arrays in the same loop.

*  Nested enhanced for loops have no limits on levels.